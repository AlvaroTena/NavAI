import tensorflow as tf
from tf_agents.distributions import utils as distribution_utils
from tf_agents.typing import types


def get_distribution_params(
    nested_distribution: types.NestedDistribution,
    legacy_distribution_network: bool,
) -> types.NestedTensor:
    """Get the params for an optionally nested action distribution.

    Only returns parameters that have tf.Tensor values.

    Args:
        nested_distribution: The nest of distributions whose parameter tensors to
        extract.
        legacy_distribution_network: Whether this distribution was generated by a
        (legacy) `DistributionNetwork`.  If `False`, expect the distribution was
        generated by a regular Network object that emits distributions.

    Returns:
        A nest of distribution parameters. Each leaf is a dict corresponding to one
        distribution, with keys as parameter name and values as tensors containing
        parameter values.
    """
    if not legacy_distribution_network:

        def dist_params_dict(d):
            return distribution_utils.parameters_to_dict(
                distribution_utils.get_parameters(d), tensors_only=True
            )

        return tf.nest.map_structure(dist_params_dict, nested_distribution)

    def _tensor_parameters_only(d, params):
        tensor_params = {k: v for k, v in params.items() if tf.is_tensor(v)}
        return tensor_params

    return tf.nest.map_structure(
        lambda d: _tensor_parameters_only(
            d.distribution.distribution, d.distribution.distribution.parameters
        ),
        nested_distribution,
    )
